edna is a work in progress text editor inspired by the UNIX standard, ed.

(note: this document is correct as of commit c4b785c ("good-bye macros. you will
 be missed.") if this is not the lastest commit, edna may have diverged from
 what is described here)

at the moment edna is quite barebones -- the supported commands are:
	- `a' to append a single line, advancing the cursor one line
	- `i' to insert a single line
	- `c' to change the current line
	- `d' to unlink and free and single line
	- `h' to explain the last error
	- `p' to print the current line
	- `q' to free the buffer and exit successfully
		- `q' has two variations -- `wq' and `Q', as in ed.

furthermore, edna has support for basic line-addressing. `1p' prints the first
line, `-2a' appends from two lines back, +d deletes the next line, etc.

if edna is given a file as it's first argument, it is read into the buffer, and
written back out on `w' and `wq' commands

edna has a ``config.h'' header file, which allows configuring three options, at
the moment:
	- the `PROMPT' macro is expanded and printed before a command is read
	  from stdin. it defaults to ':', but it is fed into printf(3),
	  allowing great flexibility. the ``"%ld:" st->lineno'' prompt is quite
	  useful, for instance
	- the `ERROR' macro is expanded and printed when a command fails in
	  some way. following ed(1), edna defaults to the inscrutable "?\n",
	  but you may find ``"%s\n" error'' more helpful. don't forget the
	  newline!
	- the `commands' array is searched sequentially everytime a command is
	  read from stdin. it has a three fields: `name', a string handle to
	  identify the command both to the user and edna, `func' a pointer to
	  function to be executed, and `mode', a string which allows extra
	  context to be given to the function.

hacking guide:
	- the text document is represented as a doubly linked list, with
	  functions acting as manipulations on this object
	- commands are representing as an array, indexed by an O(n) sequential
	  search. the first element is special, a command which always fails
	  and sets `error' to ``unknown command''

known issues:
	- most functions don't sanity check their arguments, meaning any errors
	  will cascade and compound on each other (this has gotten better,
	  however)
	- doesn't detect and properly react to eof on stdin (^D)

planned features:
	- explicit UTF-8 support
	- regex support
	- commands take arguments
	- plugin support
